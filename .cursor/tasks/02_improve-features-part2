<task>
前回のJSONスキーマ生成ライブラリの機能改善の続きを実装してください。

以下の機能を追加・改善してください：
1. テストの警告対応 - 複数回evalされるクラス名の問題を解決
2. タイプヒントのコメント追加 - 生成されるRubyコードに型情報をコメントで追加
3. 生成するクラス名の自動生成ロジックの改善 - より直感的なクラス名生成
4. 生成するRubyコードのフォーマット改善 - インデントや読みやすさの向上
5. バリデーションメッセージの日本語対応 - エラーメッセージを日本語化
</task>

--- 

- 問題点と改善点の分析
  - テストの警告対応：
    - テスト実行時に `warning: already initialized constant Payment` という警告が出ている
    - 同じクラス名で複数回 `eval` されているため、定数が再定義されている
    - generator_spec.rb の209行目と246行目で同じ Payment クラスを評価している
  - タイプヒントのコメント：
    - 現在、生成されるコードには型情報のコメントがない
    - Ruby は動的型付け言語だが、コードの読みやすさのために型情報をコメントで追加すると良い
  - クラス名の自動生成：
    - 現在は `class_name_for_property` メソッドでプロパティ名をキャメルケースに変換している
    - ネストされたオブジェクトのクラス名生成をより意味的に改善できる
  - コードフォーマット：
    - インデントや空行などを調整して読みやすさを向上させる必要がある
  - エラーメッセージの日本語化：
    - 現在のエラーメッセージは英語のみ
    - 日本語のエラーメッセージを追加する必要がある

- まずは各タスクに対応する変更点を実装し、テストで検証していく 

- 1. テストの警告対応
  - テスト内で同じクラス名を複数回evalしている問題を修正
  - generator_spec.rbの修正で、anyOfとoneOfのテストケースが同じPaymentクラスを使っていた部分を修正
  - クラス名をPaymentAnyOfとPaymentOneOfに変更することで、クラスの重複定義を解消
  - `code.gsub!("Payment = ", "PaymentAnyOf = ")` のようにクラス名をユニークにする処理を追加

- 2. タイプヒントのコメント追加
  - 生成されるRubyコードに型情報をコメントで追加
  - `property_type_description` メソッドを新規作成し、プロパティの型情報を人間が読みやすい形式で返すように実装
  - クラスの説明コメントやフィールドの型情報コメントを自動生成するよう改善
  - anyOf、oneOf、enum、配列などの複雑な型も適切に表示するよう対応

- 3. 生成するクラス名の自動生成ロジックの改善
  - `class_name_for_property` メソッドを改善し、複数形を単数形に変換する機能を追加
  - 新しく `nested_class_name` メソッドを追加して、親クラス名とプロパティの組み合わせでより明確な名前を生成
  - 例: `Address` ではなく `PersonAddress` のように、コンテキストを含む名前に

- 4. 生成するRubyコードのフォーマット改善
  - コードのインデントや空行を追加して読みやすさを向上
  - コメントの追加による可読性の向上
  - メソッドの構造や配置を整理

- 5. バリデーションメッセージの日本語対応
  - すべてのエラーメッセージを日本語化
  - 型チェック、制約チェック、enum、anyOf、oneOf、フォーマットなど、すべてのバリデーションメッセージを日本語に翻訳
  - テストケースも日本語のエラーメッセージに対応するよう修正

- 実装後のテスト実行で問題がないことを確認 

- 現在のタスクで足りていないと考えられる点：
  - READMEに追加したCLIでの動作確認部分のコマンドを実際に実行して動作検証していない
  - 生成されたコードが実際のRubyプログラムで動作するかの最終確認が不足している
  - 日本語エラーメッセージに対応したサンプルコードをtest_schema.jsonで生成して確認すべき

- 最終検証ステップ：
  1. CLIツールが正常に動作するか確認
  2. test_schema.jsonから実際にコードを生成し、生成したコードが実行可能か確認
  3. 日本語エラーメッセージが正しく表示されるかを実際に確認 

- 重大な問題の発見：
  - 現在の実装では、JSONスキーマのルートレベルが `"type": "object"` である必要がある
  - schema.jsonファイルにはルートレベルに`type`がなく、代わりに`definitions`内に複数のオブジェクト定義がある
  - この構造に対応するためには現在のライブラリのコード生成ロジックを大幅に変更する必要がある

- schema.jsonからコード生成するために必要な対応：
  1. ルートレベルに`type`がない場合でも処理できるように実装を修正
  2. `definitions`内のオブジェクト定義から複数のクラスを生成できるようにする
  3. コマンドラインインターフェースに「定義名を指定して特定の定義からクラスを生成する」オプションを追加
  4. ルートオブジェクトの代わりに指定した定義からコード生成できるように変更 