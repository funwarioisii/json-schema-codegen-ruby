<task>
JSON Schemaからのコード生成ライブラリの機能強化を実装してください。

以下の機能追加・改善を行います（優先順）：

0. definitionsへの対応 - 複数定義を含むJSONスキーマからのコード生成をサポート
1. カスタムバリデーション機能 - スキーマに追加のバリデーションルールを指定する機能
2. 国際化対応の強化 - エラーメッセージの言語切り替え機能（英語/日本語）
3. JSONスキーマからのドキュメント生成 - スキーマからRDocやYARD形式のドキュメントを自動生成
4. パフォーマンス最適化 - 大規模スキーマの処理速度向上
5. 配列要素のバリデーション強化 - 配列内の各要素に対する詳細なバリデーション
6. スキーマ依存関係の解決 - 複数のスキーマ間の参照を解決する機能
</task>

--- 

- 次のステップとして機能強化するべき理由と方針
  - 現在のライブラリは基本的な機能は実装できたが、より実用的にするためには以下の拡張が必要
  - 実際の業務利用ではより詳細なバリデーションやドキュメント生成機能が求められる
  - 機能が増えるため、パフォーマンス最適化も考慮が必要

- 0. definitionsへの対応（最優先事項）
  - 現在の実装はJSONスキーマのルートに「type: object」が必要だが、実際のスキーマでは`definitions`内に複数の定義が含まれている
  - 実装方針:
    - ルートレベルに`type`がない場合は`definitions`を検索して処理
    - CLIに`--definition <name>`オプションを追加して特定の定義からクラス生成を可能に
    - `$ref`による参照解決をサポートして相互参照できるようにする
    - 複数クラスを一度に生成するオプションの追加

- 1. カスタムバリデーション機能
  - JSON Schemaの標準機能だけでは表現できない独自のバリデーションルールをサポート
  - 例: メールドメインの制限、郵便番号のフォーマット、特定の業務ロジックに基づく検証
  - 実装方針: 拡張プロパティとして `x-validations` などを定義し、カスタムバリデーションコードを生成する

- 2. 国際化対応の強化
  - 現在は日本語のエラーメッセージのみだが、切り替え可能にする
  - ライブラリの使用時に言語設定を指定できるようにする
  - 実装方針: i18nファイルを用意し、言語設定によって適切なメッセージを選択する機能を追加

- 3. JSONスキーマからのドキュメント生成
  - スキーマの構造や制約からRDocやYARD形式のAPIドキュメントを自動生成
  - 型情報や制約がドキュメントに反映されるようにする
  - 実装方針: ドキュメント生成用のテンプレートを用意し、スキーマ情報から必要な情報を抽出

- 4. パフォーマンス最適化
  - 大規模なスキーマの処理時間を短縮
  - メモリ使用量の削減
  - 実装方針: コード生成プロセスのプロファイリングを行い、ボトルネックを特定して最適化

- 5. 配列要素のバリデーション強化
  - 配列内の要素に対するより詳細なバリデーション
  - 要素ごとに異なるスキーマを適用可能に
  - 実装方針: `items`や`contains`プロパティのサポートを拡張し、要素固有のバリデーションを実装

- 6. スキーマ依存関係の解決
  - `$ref`を使った外部スキーマの参照をサポート
  - 複数のスキーマファイルを組み合わせたコード生成
  - 実装方針: JSONスキーマの参照解決機能を実装し、関連するすべてのスキーマを取得・処理する仕組みを追加 

## 実装結果とテスト

### 1. 実装したdefinitionsセクション対応機能
- 今回の実装では、schema.jsonのような複雑なスキーマからdefinitionsセクションを解析して
  Rubyクラスを生成するための主要なコンポーネントを追加しました:
  - `DefinitionsGenerator`クラス - 定義セクションの処理を専門に行う生成器
  - 拡張APIメソッド - 様々な定義処理パターンをサポート
  - CLIサポート - コマンドラインからの柔軟な定義処理

- 実装時に気づいた注意点：
  - ネスト定義の名前付け規則の重要性 - 名前衝突を避けるため慎重に考慮する必要あり
  - 参照解決(`$ref`)の複雑さ - この部分は次の実装フェーズで重点的に取り組む必要あり
  - 大規模スキーマ処理時のパフォーマンス最適化がさらに必要

### 2. テスト結果

CLIツールで実際にschema.jsonを処理した結果:
```
# 定義一覧の表示
$ ruby -I lib ./bin/json_schema_codegen -l schema.json
# 結果: 79個の定義が正しく表示された

# 特定の定義からクラス生成
$ ruby -I lib ./bin/json_schema_codegen -d Annotated -o annotated_test.rb schema.json 
# 結果: 86行の有効なRubyコードが生成された

# 複数定義の同時生成
$ ruby -I lib ./bin/json_schema_codegen -m ImageContent,TextContent -o multiple_contents.rb schema.json
# 結果: 228行のコードで両方のクラスと関連ヘルパーが適切に生成された

# 全定義の生成
$ ruby -I lib ./bin/json_schema_codegen -a -o all_definitions.rb schema.json
# 結果: 3876行の完全なRubyコードが生成された
```

### 3. extract_and_generate.shとの比較

一時的に作った`extract_and_generate.sh`スクリプトと今回の実装の比較:

- シェルスクリプト方式:
  - 一時ファイルを使ってワークアラウンド的に対応
  - jqに依存
  - 処理が複数のステップに分かれる
  - ファイル間の移動が多く、エラー処理が複雑

- 新実装の方式:
  - ライブラリとして統合された機能
  - 一時ファイルの不要化
  - 複雑なデータ構造を直接メモリ上で処理
  - エラーハンドリングの改善と統一
  - API経由での柔軟な使用が可能

### 4. 今後の課題

実装優先度の高い残りの機能:
1. **$ref参照解決機能** - 定義間の相互参照をサポートする重要機能
2. **複数スキーマの統合** - 複数のJSONスキーマファイルを組み合わせた処理
3. **ライブラリAPIの高度な設定オプション** - より細かい制御を可能にする

テストと品質保証に関する課題:
1. テストカバレッジの拡充 - バリデーションロジックの挙動
2. 非正常系のテスト追加 - 不正なスキーマ入力への対応
3. 大規模スキーマでのパフォーマンス測定

### 5. 内部実装の詳細

`DefinitionsGenerator`クラスの設計ポイント:
- 基本生成器と専門生成器の分離によるコードの整理
- メモリ効率を考慮した定義処理（大規模スキーマ用）
- 後方互換性の維持とAPIの自然な拡張
- 内部で使うクラス名の管理に注意（特に`available_definitions`メソッド）

`CLI`クラスの実装では、コマンドライン引数の入力バリデーションを慎重に行い、
無効な入力に対して適切なフィードバックを提供するようにしました。
特に複数の機能が同時に指定された場合の優先順位（-d > -m > -a > その他）の
ロジックは直感的に動作するよう考慮しています。 